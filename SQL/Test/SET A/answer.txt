1) retrieve all employees' names and salaries, ordered by salary in descending order.
mysql>select name, salary 
    ->from employees
    ->order by salary desc;
+-----------+----------+
| firstname | salary   |
+-----------+----------+
| Steven    | 26400.00 |
| Neena     | 18700.00 |
| Lex       | 18700.00 |
| Nancy     | 13200.00 |
| Alexander |  9900.00 |
| Daniel    |  9900.00 |
| Bruce     |  6600.00 |
| David     |  5280.00 |
| Valli     |  5280.00 |
| Diana     |  4620.00 |
+-----------+----------+
10 rows in set (0.00 sec)

2) retrieve the top 5 highest-paid employees.
mysql>select *
    ->from employees
    ->order by salary desc
    ->limit 5;
+-------------+-----------+-----------+---------------+--------------+------------+---------+----------+----------------+------------+---------------+
| employee_id | firstname | last_name | email         | phone_number | hire_date  | job_id  | salary   | commission_pct | manager_id | department_id |
+-------------+-----------+-----------+---------------+--------------+------------+---------+----------+----------------+------------+---------------+
|         100 | Steven    | King      | not available | 515.123.4567 | 1987-06-17 | AD_PRES | 26400.00 |           0.10 |        200 |            10 |
|         101 | Neena     | Kochhar   | not available | 515.123.4568 | 1987-06-18 | AD_VP   | 18700.00 |           0.10 |        200 |            10 |
|         102 | Lex       | De Haan   | not available | 515.123.4569 | 1987-06-19 | AD_VP   | 18700.00 |           0.10 |        200 |            10 |
|         108 | Nancy     | Greenberg | not available | 515.124.4569 | 1987-06-25 | SA_MAN  | 13200.00 |           0.10 |        145 |            80 |
|         103 | Alexander | Hunold    | not available | 590.423.4567 | 1987-06-20 | IT_PROG |  9900.00 |           0.10 |        103 |            60 |
+-------------+-----------+-----------+---------------+--------------+------------+---------+----------+----------------+------------+---------------+
5 rows in set (0.00 sec)
3) fetch employee records, skipping the first 3 and showing the next 5.
mysql>select *
    ->from employees
    ->limit 5 offset 3;
+-------------+-----------+-----------+---------------+--------------+------------+---------+---------+----------------+------------+---------------+
| employee_id | firstname | last_name | email         | phone_number | hire_date  | job_id  | salary  | commission_pct | manager_id | department_id |
+-------------+-----------+-----------+---------------+--------------+------------+---------+---------+----------------+------------+---------------+
|         103 | Alexander | Hunold    | not available | 590.423.4567 | 1987-06-20 | IT_PROG | 9900.00 |           0.10 |        103 |            60 |
|         104 | Bruce     | Ernst     | not available | 590.423.4568 | 1987-06-21 | IT_PROG | 6600.00 |           0.10 |        103 |            60 |
|         105 | David     | Austin    | not available | 590.423.4569 | 1987-06-22 | IT_PROG | 5280.00 |           0.10 |        103 |            60 |
|         106 | Valli     | Pataballa | not available | 590.423.4560 | 1987-06-23 | IT_PROG | 5280.00 |           0.10 |        103 |            60 |
|         107 | Diana     | Lorentz   | not available | 590.423.5567 | 1987-06-24 | IT_PROG | 4620.00 |           0.10 |        114 |            30 |
+-------------+-----------+-----------+---------------+--------------+------------+---------+---------+----------------+------------+---------------+
5 rows in set (0.00 sec)

4) count the number of employees in each department.
mysql>select department_name, count(*) as number_of_employees
    ->from employees e inner join department d
    ->on e.department_id = d.department_id
    ->group by department_name;
+-----------------+---------------------+
| department_name | number_of_employees |
+-----------------+---------------------+
| Administration  |                   3 |
| Purchasing      |                   1 |
| IT              |                   4 |
| Sales           |                   2 |
+-----------------+---------------------+
4 rows in set (0.02 sec)

5) fetch the department-wise average salary for departments where the average is over 50,000.
mysql> select department_name, avg(salary) as average_salary
    -> from employees e inner join department d
    -> on e.department_id=d.department_id
    -> group by department_name
    -> having avg(salary) > 50000;
Empty set (0.01 sec)


6) retrieve products where the product name contains "Laptop".
--No actual product table created so just question answered with query
select *
from products
where product_name like '%Laptop%';

7) extract the first three characters from the student_name column.
--No actual student table created so just question answered with query
select substring(student_name, 1, 3) as name_extract
from students;

8) fetch students whose names start with "A".
--No actual student table created so just question answered with query
select *
from students
where student_name like 'A%';

9) find the total number of orders per month for months with more than 100 orders.
--No actual orders table created so just question answered with query
select month(order_date) as order_month, count(order_id) as total_orders
from orders
group by month(order_date)
having count(order_id) > 100;

10) get total and average sales per category for categories with total sales over 100,000.
--No actual sales table created so just question answered with query
select category, sum(sales_amount) as total_sales, avg(sales_amount) as average_sales
from sales
group by category
having sum(sales_amount) > 100000;

/************************************************************************************************************/
11. What does the following query return?
SELECT COUNT(*) FROM Employees;
a) The total number of employees
b) The sum of salaries of employees
c) The first record of the table
d) An error message

Answer -  a) The total number of employees

12. What will be the output of the following query?
SELECT LENGTH('Database');
a) 9
b) 8
c) 10
d) Error

Answer - b) 8

13. Which of the following clauses is used to filter grouped results?
a) WHERE
b) ORDER BY
c) HAVING
d) GROUP BY

Answer - c) HAVING

14. What does `LEFT JOIN` do?
a) Returns only the matching rows from both tables
b) Returns all rows from the left table and matching rows from the right table
c) Returns all rows from the right table and matching rows from the left table
d) Returns all rows from both tables

Answer - b) Returns all rows from the left table and matching rows from the right table

15. What will be the result of the following query?
SELECT UPPER('hello world');
a) hello world
b) HELLO WORLD
c) Hello World
d) Syntax error

Answer - b) HELLO WORLD


16. Question:
You have two tables:
• Orders with columns: order_id, customer_id, order_date, total_amount.
• Customers with columns: customer_id, region.
• O/P- region | total_orders
Write an SQL query to find the total order amount (total_amount) for each region. Only include
regions where the total order amount is greater than 10000

Answer:   --No actual tables created so just question answered with query

select c.region, sum(o.total_amount) as total_order_amount
from customers c
join orders o on c.customer_id = o.customer_id
group by c.region
having sum(o.total_amount) > 10000;


17. Question:
You have two tables:
• Books with columns: book_id, author_id, title, price.
• Sales with columns: sale_id, book_id, sale_date, quantity.
• O/P- author_id | total_books_sold
Write an SQL query to find the total number of books sold by each author. Only include authors
who have sold more than 100 books.

Answer:  --No actual tables created so just question answered with query

select b.author_id, sum(s.quantity) as total_books_sold
from books b
join sales s on b.book_id = s.book_id
group by b.author_id
having sum(s.quantity) > 100;

